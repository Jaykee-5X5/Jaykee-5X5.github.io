{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#hello-my-name-is-jacob-wilson","title":"Hello my name is Jacob Wilson","text":"<p>This is the website for the actuator subsystem for Team 204. </p>","tags":["tag1","tag2"]},{"location":"#directory","title":"Directory","text":"<ul> <li>Component Selection and Power Budget</li> <li>Individual Block Diagram and Schematic</li> </ul>","tags":["tag1","tag2"]},{"location":"#to-group-website","title":"To group website","text":"<ul> <li>Team 204 Website</li> </ul>","tags":["tag1","tag2"]},{"location":"Actuator_Subsystem_API/","title":"API","text":""},{"location":"Actuator_Subsystem_API/#api-overview","title":"API Overview","text":"<p>The actuator subsystem is responsible for handling key control commands and relaying verified messages across the daisy chain network. On startup, a verification message is sent, along with robot following distance, following speed, and system status updates.</p> <p>Any valid incoming messages intended for another team member are forwarded along the daisy chain. Messages directed to this subsystem must fall within the predefined command set, which includes:</p> <p>Motor Speed Adjustments</p> <p>Motor Rotation Control (for motor 1 or motor 2)</p>"},{"location":"Actuator_Subsystem_API/#change-motor-speed","title":"Change Motor Speed","text":"Type Byte 1 Byte 2 Variable Name message_type motor_speed Variable Type uint8_t int8_t Min Value 0 0 Max Value 9 100 Example 0 50 <ul> <li>This message changes the speed at which the motors will move at. The message begins with the message type allowing the reciever to sort the message easier, then byte 2 is the target speed at which the motor will travel at. The speed value does not control the motor directly just states at what speed all the motors will move at. </li> </ul>"},{"location":"Actuator_Subsystem_API/#drive-individual-motor","title":"Drive Individual motor","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type motor_id motor_speed Variable Type uint8_t uint8_t int8_t Min Value 0 1 0 Max Value 9 2 100 Example 0 1 30 <ul> <li>This message is for driving the motors independently so that the user can directly control the motors using the buttons on the robot. Byte 1 in the message is the meesage type allowing the reciever to sort the message easier. Then byte 2 is the motor_id to select which motor the message is targeting. Byte 3 is the speed at which the motor will be moving at. </li> </ul>"},{"location":"Actuator_Subsystem_API/#other-types-of-messages","title":"Other Types of Messages","text":"<ul> <li>Any message that I recieve that I cannot handle will only be re-sent over uart if the sender and receiver are in the team.</li> <li>If I recieve a message that I sent but then recieved over uart, I will delete (not do anything with) the message since there is no function besides handling a message from me (not using data).</li> <li>If a message is addressed to someone or sent from someone not in my team then the system will not handle the message and perform a function. The system is designed to recognize and filter based upon sender and receiver being in the team. </li> </ul>"},{"location":"Bill_of_Materials/","title":"Bill of Materials","text":""},{"location":"Bill_of_Materials/#overview","title":"Overview","text":"<p>Below is the Bill of Materials for the Actuator subsystem. Alot of these components came from our kits given out in class to pad my individual budget (the SPI H-Bridges were pricey). If a prospective student is using this as an example, please look to see what microcontrollers have already been purchased by the professors. Other than that, make sure to follow the data sheet's reccomended circuits and base your orders on those (try to order enough to make at least two copies of each circuit individually). This really helps with debugging in case of a unexpected roadblock.</p>"},{"location":"Bill_of_Materials/#bill-of-materials-order-forms","title":"Bill of Materials/ Order Forms","text":""},{"location":"Component_Selection_and_Power_Budget/","title":"Component Selection","text":""},{"location":"Component_Selection_and_Power_Budget/#major-components","title":"Major Components","text":"<p>Switching Voltage Regulator The voltage regulator is a critical component for ensuring stable power delivery to the ESP32 surface mount and supporting components on the PCB. Below are the evaluated options: | Solution                                                                                                                                                                                      | Pros                                                                                                                                    | Cons                                                                                            | | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | | Option 1 LM2575 Switching Voltage Regulator\\(1.75/each&lt;br&gt;[link to product](https://www.digikey.com/en/products/detail/microchip-technology/LM2575-3-3WU-TR/1027646)           | \\* Simple external circuit&lt;br&gt;\\* Small size &lt;br&gt;\\* Meets surface mount constraint of project &lt;br&gt;\\* Good data sheet | \\* All pins are on one side&lt;br&gt;\\* really small                     | | ![LT1767EMS8 Swithcing Voltage Regulator](LT1767EMS8-_Voltage_Regulator.jpg)&lt;br&gt; Option 2 &lt;br&gt; LT1767EMS8 Switching Voltage Regulator &lt;br&gt;\\)10.57/each  Link to product | * Already has a circuit for 12v to 3.3v in its data sheet * Has a good pin layout                            | * A lot more expensive * A complicated external circuit is required                  | |  Option 3  L4971D Switching VOltage Regulator$3.70/each  Link to product                             | * Midprice range * Adjustable voltage output                                                                     | * A lot of pins * An external circuit with lots of components is required    |</p> <p>Choice: Option 1: LM2575 Switching Voltage Regulator</p> <p>Rationale: Following Jake\u2019s approach, I have chosen the LM2575 regulator as it offers a simple circuit, compact size, and ease of integration while meeting surface mount constraints. This regulator will provide stable power for the ESP32 and additional PCB components.</p>"},{"location":"Component_Selection_and_Power_Budget/#microcontroller-selection","title":"Microcontroller Selection","text":"<p>I have selected a variant of the ESP32 WROOM surface mount microcontroller. The total number of required pins is still to be determined, but the ESP32 provides sufficient versatility for actuator control and SPI communication. </p>"},{"location":"Component_Selection_and_Power_Budget/#role-on-the-team","title":"Role on the team","text":"<p>The actuator subsystem processes incoming data from the sensor subsystem and dynamically adjusts actuator states\u2014whether turning components on/off or modifying their speed. This subsystem is critical for maintaining the sensor's tracking accuracy.</p>"},{"location":"Component_Selection_and_Power_Budget/#pins-needed","title":"Pins needed","text":"<p>For my subsystem I require 27 pins not including power and ground or programming pins. I used 21 digital IO pins, 2 pins for Micro USB connection, and then 4 for the SPI interface. </p> Module # Available Needed Associated Pins GPIO 32 21 Please Refer to Schematic ADC 25 0 N/A UART 2 2 RX and TX SPI 4 4 I0 13-16 I2C 0 0 N/A PWM 32 2 IO 38 and 47 ICSP 2 2 D+ and D-"},{"location":"Component_Selection_and_Power_Budget/#final-selection","title":"Final Selection","text":"<p>The ESP32 has a strong track record in actuator control applications, ranging from hobbyist projects to professional-grade systems. Additionally, since I plan to integrate an SPI communication link between the actuator and sensor subsystems, the ESP32 provides the necessary features and flexibility.</p>"},{"location":"Component_Selection_and_Power_Budget/Power_Budget/","title":"Power Budget","text":""},{"location":"Component_Selection_and_Power_Budget/Power_Budget/#overview","title":"Overview","text":"<p>This power budget outlines the estimated power consumption of the actuator subsystem, including the ESP32, actuators, and supporting electronics.</p>"},{"location":"Component_Selection_and_Power_Budget/Power_Budget/#power-budget","title":"Power Budget","text":"<p>Power Consumption Analysis The power budget has allowed our team to determine the minimum operational runtime before requiring a battery swap under full load conditions.</p> <p>Given that the actuator subsystem alone is particularly power-intensive, Team 204 is considering an approach where the other subsystems operate on separate power sources, while the actuator subsystem maintains its own dedicated power supply.</p> <p>However, this decision remains tentative and will be finalized following hardware testing in the coming weeks.   </p>"},{"location":"Individual_Block_Diagram_and_Schematic/","title":"Individual Block Diagram","text":""},{"location":"Individual_Block_Diagram_and_Schematic/#block-diagram","title":"Block Diagram","text":""},{"location":"Individual_Block_Diagram_and_Schematic/#overview","title":"Overview","text":"<p>This section presents the Block Diagram and schematic for the actuator subsystem, detailing communication protocols, power distribution, and system integration.</p> <p>Microcontroller &amp; Communication Protocols The ESP32 WROOM surface-mount microcontroller is selected to control the actuator subsystem.</p> <p>SPI is utilized for communication with the sensor module and actuators.</p> <p>UART is employed for interfacing with the remaining subsystems.</p> <p>Power Distribution Actuator Power Supply: A dedicated 9V DC battery ensures stable operation.</p> <p>Supporting Electronics Power: A 3.3V buck converter setup supplies shared power for additional components.</p> <p>Serial Communication Integration To maintain seamless data flow across all subsystems, upstream and downstream headers enable serial communication through a daisy-chain connection, ensuring efficient message propagation. </p>"},{"location":"Individual_Block_Diagram_and_Schematic/#block-diagram-and-schematic","title":"Block Diagram and Schematic","text":"<p>  The functionality of the schematic satisies our product requirements by allowing our motors to be controlled through SPI communication with my teammates boards. In terms of user needs, this setup puts reliability and reproducablilty at the forefront. There is nothing fancy happening here, just raw performance.  Schematic Zip File</p>"},{"location":"PCB_Design/","title":"Schematic and PCB Design","text":""},{"location":"PCB_Design/#schematic-design","title":"Schematic Design","text":""},{"location":"PCB_Design/#pcb-design","title":"PCB Design","text":"<p>Below is the PCB for the actuator subsystem. The PCB is based off of the schematic above and fits on a 75x75mm board. In each corner is a hole 5mm from the sides that is on all of our team's subsystem boards allowing them all to stack vertically saving space, as well as looking aesthetically pleasing. </p>"},{"location":"PCB_Design/#pcb","title":"PCB","text":""},{"location":"PCB_Design/#top-of-pcb","title":"Top of PCB","text":""},{"location":"PCB_Design/#circuit-layout","title":"Circuit Layout","text":""},{"location":"PCB_Design/#3d-model","title":"3D Model","text":""},{"location":"PCB_Design/#bottom-of-pcb","title":"Bottom of PCB","text":""},{"location":"PCB_Design/#circuit-layout_1","title":"Circuit Layout","text":""},{"location":"PCB_Design/#3d-model_1","title":"3D Model","text":""},{"location":"PCB_Design/#manufactured-pcb","title":"Manufactured PCB","text":""},{"location":"PCB_Design/#overview","title":"Overview","text":"<p>The PCB was manufactured by Peralta Lab using the design shown above. Below both the unpopulated PCB and the populated PCB are shown. The populated PCB is has all the parts from the bill of materials and from our kits. </p>"},{"location":"PCB_Design/#manufactured-unpopulated-pcb","title":"Manufactured Unpopulated PCB","text":""},{"location":"PCB_Design/#top-of-pcb_1","title":"Top of  PCB","text":""},{"location":"PCB_Design/#bottom-of-pcb_1","title":"Bottom of PCB","text":""},{"location":"PCB_Design/#issues-with-the-design","title":"Issues With The Design","text":"<p>Some Issuses that were encountered with the PCB design that was not discovered till after manufacturing was the two eight pin connectors. The footprint used was to small for the actual part so some modifications to the board were made using deadbugging. Another issue that went unnoticed was the CLK line for I2C was connected to the microcontroller via a pin that would not allow I2C so using an extra GPIO pin a modifcation was made and the CLK line was moved.</p>"},{"location":"PCB_Design/#populated-pcb","title":"Populated PCB","text":""},{"location":"PCB_Design/#top-of-pcb_2","title":"Top of PCB","text":""},{"location":"PCB_Design/#issues-after-populating","title":"Issues After Populating","text":"<p>After fixing the issues found right after manufacturing some more issues we apparent. One major issue were the vias. Each via had to be hand soldered, since no pro conduct was introduced to the board. After funbling for a bit, I chose to use resistors to connect the top plane of the board (3.3V) to the bottom (GND). I would then snip off the resistor part and just keep the tiny wires. Unaesthetically pleasing, but effective. Another problem that arose, was that I used the wrong footprint for my 470uF capactitors. I used a THT footprint, vs a surface muount one. To solve this issue, I again soldered on resistor wires to the ends of the SMD capactors and made custom THT capacitors. </p>"},{"location":"PCB_Design/#team-decision-with-pcbs","title":"Team Decision with PCBs","text":"<p>In our team as mentioned above in the PCB overview our team opted to go for a standard size of 75x75mm with 3mm holes 5mm away from each corner to allow for our PCBs to be stacked veetically. We thought that this would be a good design choice to allow for compact packaging which is key to making our project sucessful as it needs to be able to freely move around. We also shared a lot of design tips and checked each others board to make sure that the connections were good overall. While somethings did get missed on first look they did not impact the overall project in the end. By verifying that we all had met the class standards we were able to make sure that we could all connect without risk of damaging someone else's PCB.</p>"},{"location":"PCB_Design/#improvements-to-be-made","title":"Improvements to be Made","text":"<p>The major improvements to be made would be to redesign the PCB. I would live to accomodate more surface mount supporting electronics (resistors, etc.) If I were to tackle this again, I would try extra hard to produce a almost mass producable board. I would also seek professional help though digikey and other contacts I know who do pcb engineering and manufacturing as their profession. If I also had just more time, I feel the product I could've produced would outshine my current model by at least 2X. </p>"},{"location":"PCB_Design/#downloadable-files","title":"Downloadable files","text":"<p>Below are the files related to the design, production, and check off of the Schematic and PCB</p>"},{"location":"PCB_Design/#design-files","title":"Design Files","text":"<p>The Files for the PCB and Schematic can be downloaded from this: Actuator System PCB and Schematic zip folder</p>"},{"location":"PCB_Design/#gerber-and-drill-files","title":"Gerber and Drill Files","text":"<p>The Gerber and Drill files for manufacturing can be downloaded from this: Actuator System Gerber and Drill files zip folder</p>"},{"location":"PCB_Design/#hardware-checkoff-code","title":"Hardware Checkoff Code","text":"<p>The Python code that was used during the in class hardware check off for EGR 314 can be downloaded from this: Python code zip folder</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}