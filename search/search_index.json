{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#hello-my-name-is-jacob-wilson","title":"Hello my name is Jacob Wilson","text":"<p>This is the website for the actuator subsystem for Team 204. </p>","tags":["tag1","tag2"]},{"location":"#directory","title":"Directory","text":"<ul> <li>Individual Block Diagram</li> <li>Component Selection</li> <li>Actuator Subsystem Schematic</li> </ul>","tags":["tag1","tag2"]},{"location":"#to-group-website","title":"To group website","text":"<ul> <li>Team 204 Website</li> </ul>","tags":["tag1","tag2"]},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#major-components","title":"Major Components","text":"<p>Switching Voltage Regulator</p> Solution Pros Cons Option 1 LM2575 Switching Voltage Regulator$1.75/eachlink to product * Simple external circuit* Small size * Meets surface mount constraint of project * Good data sheet * All pins are on one side* really small  Option 2  LT1767EMS8 Switching Voltage Regulator $10.57/each  Link to product * Already has a circuit for 12v to 3.3v in its data sheet * Has a good pin layout  * A lot more expensive * A complicated external circuit is required  Option 3  L4971D Switching VOltage Regulator$3.70/each  Link to product * Midprice range * Adjustable voltage output * A lot of pins * An external circuit with lots of components is required <p>Choice: Option 1: LM2575 Switching Voltage Regulator</p> <p>Rationale: This switching voltage regulator emits an output of 3.3 volts when setup with an external circuit like shown in the detailed data sheet. The circuit is not complicated and does not require to many components externally. It also comes at a lower price than either of the other two options.It also allows a current operating range with a max of 1 A and a min voltage of 4 V with a max of 40V</p> <p>Push Buttons</p> Solution Pros Cons Option 1 TS04-66-70-BK-160-SMT Surface Mount Push Button$0.17/eachlink to product * Easy simple switch* Small size* Surface mount button * Not visually appealing * Might be to small so not as easily accessible for everyone to push  Option 2  Gikfun Tact Tactile Push Button $0.35/each  Link to product * Colorful buttons to allow for a more visual experience * big buttons to allow easy pushing for anyone * Not specifically designed for surface mount but the leads can be bent to be surface mount *  Option 3  G3B15AB-XA Push Button Switch$0.81/each  Link to product * Bigger than the other swithces * Removeable cap that can be replaced with a different colored one * More expensive than other switches * <p>Choice: Option 2: Gikfun Tact Tactile Push Button</p> <p>Rationale: This button is the best choice because it comes with different caps to allow easier pushing and to allow color labels on the button. The buttons also allowed for different variations of the caps that could include a label so that colorblind people can easily tell the buttons apart.</p> <p>OLED Screen</p> Solution Pros Cons  Option 1 Teyleten 0.96 inch LCD OLED Display  $2.58/each Link to product * Already provided in class Will have experience using it * It is a small screen <p>Choice: Option 1: Teyleten 0.96 inch LCD OLED Display Board</p> <p>Rationale: The OLED screen is one that we have been given in class and have a lab that teaches us how to use it. Since the OLED is provided in class it will be free to use and gives more time to work with for debugging.</p>"},{"location":"Component_Selection/#microcontroller-selection","title":"Microcontroller Selection","text":""},{"location":"Component_Selection/#reason-for-selection","title":"Reason for Selection","text":"<p>For my microcontroller I decided to go with the PIC18F47Q10-I/PT. This is the surface mount varient of the PIC18F47Q10 that we have used in class. Below is a table of all the information about the microcontroller.</p> PIC Info Answer Model PIC18F47Q10-I/PT Product Page URL Product Page Datasheet URL Datasheet Application Notes URL Application Notes Vendor Link Vendor Link Code Examples Code Example GPIO Read/Write Code Example I2C Read/Write External Resources Programming OLED screen with MPLabX and a PIC Unit Cost $1.65 Supply voltage range 1.8V min to 5.5V max Maximum GPIO Current (per pin) 50 mA Supports External Interrupts Yes Required Programming Hardwar, Cost, URL MPLAB SNAP  Cost: $14.99 Works with MPLabX Yes Works with Microchip Code Configurator Yes"},{"location":"Component_Selection/#role-on-the-team","title":"Role on the team","text":"<p>My role on my team is to design and make the Human Machine Interface (HMI). I plan on doing this by using 3 buttons, a potentiometer, 2 LEDs and an OLED screen. The buttons will allow the user to do simple interactions like start the object following process or control a menu system that is displayed on the OLED screen. The OLED screen is going to be used to display sensor data and prompt instructions to the user on how to use it. The potentiometer will allow the user to select from a range of values to adjust the following distance or the speed of the robot itself. The LEDs will light up when a action is happening for example the green LED might turn on when the robot is in object following mode.</p>"},{"location":"Component_Selection/#pins-needed","title":"Pins needed","text":"<p>For my subsystem I require 12 pins not including power and ground or programming pins. I will need 5 digital input pins, 3 digital output pins, 2 pins for I2C connection, and then 2 for the UART connection. The selected microcontroller </p> Module # Available Needed Associated Pins GPIO 25 8 The button GPIO pins will be on Pins RA6, RA7 and RE2  The potentiometer will be on pin RB1  The two LEDs will be on pins RD5 and RD6  The input pin from the upstream header will be on pin RD4  The output pin that goes to the downstream header will be on pin RC5 ADC 25 0 N/A UART 2 1 Rx on pin RC7  Tx on pin RC6 SPI 2 0 N/A I2C 2 2 SCL1 on pin RC3  SDA1 on pin RC4 PWM 2/2 0 N/A ICSP 3 3 MCLR is on RE3  ICSPDAT is on RB7  ICSPCLK is on RB6"},{"location":"Component_Selection/#mcc-pin-layout","title":"MCC Pin Layout","text":"<p>Below is the pin selection screen in MCC showing all selected pins allocated. It shows the dedicated pins for UART, the I2C pins, the MCLR pin, the open pins for ICSPDAT and ICSPCLK, then all the GPIO pins dedicated to inputs and outputs respectivly. All the pins match the table above with the pin locations. On the left side of the picture it shows the layout of all the pins on the physical microcontroller. The pins are grouped togther in a way that allows space between each section and keeping like pins together for example the Rx and the upstream input are right next to each other while the Tx and the downstream output are next to each other and the two sections are right by each other.</p> <p></p>"},{"location":"Component_Selection/#mcc-microcontroller-details","title":"MCC Microcontroller details","text":"<p>Below is the setup for the microcontroller where it also shows how many different applications that it can support with its pins.</p> <p></p>"},{"location":"Component_Selection/#final-selection","title":"Final Selection","text":"<p>The ESP32 is the best route, since it has a long track record of being used to conrol actuators in many hobbyist, and professional production applications. Since I am also planning on integrating a SPI communication link between my subsystem and the sensor subsystem, I personally think the ESP32 is the way to go. </p>"},{"location":"Component_Selection/Power_Budget/","title":"Power Budget","text":""},{"location":"Component_Selection/Power_Budget/#overview","title":"Overview","text":"<p>Here is the power budget for the actuator subsystem. This includes the actuiators and the esp32 and supporting electronics only in the actuator subsystem. </p>"},{"location":"Component_Selection/Power_Budget/#power-budget","title":"Power Budget","text":""},{"location":"Individual_Block_Diagram/","title":"Individual Block Diagram","text":""},{"location":"Individual_Block_Diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"Individual_Block_Diagram/#overview","title":"Overview","text":"<p>Here is the Block Diagram for the actuator subsystem. The microcontroller chosen to run the actuator subsytem is the ESP32 WROOM surface mount. With that, I plan on using SPI to communicate with the sensor module, and to use uart with the others. The actuator itself will be powered by a separate 9V DC battery supply, while the other electronics will use shared power from a 3.3V buck converter setup. The upstream and downstream headers are to allow serial communication between all subsystems through a daisychain connection. </p>"},{"location":"Individual_Block_Diagram/#block-diagram_1","title":"Block Diagram","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}